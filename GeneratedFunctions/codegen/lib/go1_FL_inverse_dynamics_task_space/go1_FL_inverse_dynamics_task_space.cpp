//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// go1_FL_inverse_dynamics_task_space.cpp
//
// Code generation for function 'go1_FL_inverse_dynamics_task_space'
//

// Include files
#include "go1_FL_inverse_dynamics_task_space.h"
#include <cmath>

// Function Definitions
void go1_FL_inverse_dynamics_task_space(const double &q[3], const double &v[3], const double &a[3], double &tau[3]) {
  double a_tmp;
  double t10;
  double t100;
  double t104;
  double t106;
  double t11;
  double t12;
  double t124;
  double t13;
  double t136;
  double t138;
  double t139;
  double t14;
  double t144;
  double t147;
  double t158;
  double t162;
  double t20;
  double t21;
  double t220;
  double t220_tmp;
  double t227;
  double t227_tmp;
  double t236;
  double t239;
  double t26;
  double t265;
  double t266;
  double t279;
  double t280;
  double t29;
  double t290;
  double t290_tmp;
  double t296;
  double t296_tmp;
  double t298;
  double t299;
  double t30;
  double t301;
  double t307;
  double t308;
  double t311;
  double t317_tmp;
  double t322;
  double t322_tmp;
  double t333;
  double t335;
  double t336;
  double t337;
  double t337_tmp;
  double t338;
  double t34;
  double t348;
  double t35;
  double t37;
  double t379;
  double t379_tmp;
  double t386;
  double t387;
  double t390;
  double t391;
  double t396;
  double t40;
  double t407;
  double t42;
  double t420;
  double t421;
  double t422;
  double t423;
  double t424;
  double t433;
  double t433_tmp;
  double t434;
  double t435;
  double t444_tmp;
  double t45;
  double t46;
  double t469;
  double t471_tmp;
  double t476;
  double t48;
  double t49;
  double t5;
  double t500;
  double t51;
  double t510;
  double t519;
  double t56;
  double t59;
  double t6;
  double t63;
  double t64;
  double t69;
  double t7;
  double t70;
  double t71;
  double t72;
  double t78;
  double t8;
  double t82;
  double t83;
  double t84;
  double t85;
  double t86;
  double t9;
  double t93;
  // go1_FL_inverse_dynamics_task_space
  //     TAU = go1_FL_inverse_dynamics_task_space(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     01-Jul-2023 18:27:08
  t5 = std::cos(q[0]);
  t6 = std::cos(q[1]);
  t7 = std::cos(q[2]);
  t8 = std::sin(q[0]);
  t9 = std::sin(q[1]);
  t10 = std::sin(q[2]);
  t11 = q[0] + q[1];
  t12 = q[0] + q[2];
  t13 = q[1] + q[2];
  t14 = q[1] * 2.0;
  t20 = t6 * t6;
  t21 = t7 * t7;
  t26 = std::cos(t13);
  t29 = std::sin(t13);
  t30 = q[2] + t11;
  t37 = 1.0 / t10;
  t40 = q[1] + t13;
  t46 = t11 + t13;
  t48 = q[0] - q[1];
  t49 = q[0] - q[2];
  t51 = t13 * 2.0;
  t59 = t13 - q[0];
  t510 = t5 * v[1];
  t82 = t510 * 81200.0;
  t83 = t5 * v[2] * 213000.0;
  t336 = t8 * v[2];
  t84 = t336 * 81200.0;
  t85 = t9 * v[0] * 213000.0;
  t86 = t8 * v[1] * 213000.0;
  t104 = t6 * t8 * v[1] * -213000.0;
  t124 = t5 * t9 * t10 * v[2] * -213000.0;
  t34 = std::cos(t30);
  t35 = std::sin(t30);
  t42 = std::cos(q[2] + t13);
  t45 = std::sin(t40);
  t56 = std::cos(q[1] - q[2]);
  t63 = 1.0 / (t7 + 1.0);
  t69 = std::sin(t51);
  t70 = t13 + t30;
  t71 = std::cos(t59);
  t72 = std::sin(t59);
  t78 = -q[0] + t40;
  t93 = -q[0] + t51;
  t30 = t6 * t83;
  t100 = t7 * t85;
  a_tmp = t9 - t29;
  t106 = 1.0 / (a_tmp * a_tmp);
  t136 = t510 * 1000.0 + t336 * 1000.0;
  t280 = (t10 * 0.179549 + t7 * 0.003341999999999993) + 0.0061970000000000081;
  t64 = t63 * t63;
  t144 = t136 * t136;
  t279 = (t7 * 0.179549 - t10 * 0.003341999999999993) + 0.116695;
  t138 = 1.0 / (t6 * 213.0 + t26 * 213.0);
  t147 = 1.0 / (t6 * 1065.0 + t26 * 1065.0);
  t290_tmp = t9 * t10;
  t519 = t6 * t10;
  t290 = (((((((((t85 - t82) - t84) + t30) + t519 * v[0] * 213000.0) + t100) +
             t104) +
            t7 * t30) +
           t290_tmp * t86) +
          t7 * t104) +
         t124;
  t30 = t5 * t20;
  t336 = t6 * t7;
  t59 = t336 * t8;
  t510 = t5 * t6 * t7;
  t335 = ((((((((((((((((((((((t83 - t86) - std::sin(t14) * v[0] * 106500.0) -
                             std::sin(q[2] * 2.0) * v[0] * 106500.0) +
                            t6 * t100) +
                           t290_tmp * t82) +
                          t290_tmp * t84) +
                         t10 * t20 * v[0] * 213000.0) +
                        t20 * t86) +
                       t21 * t86) +
                      t510 * v[1] * -81200.0) +
                     t59 * v[2] * -81200.0) +
                    t30 * v[2] * -213000.0) +
                   t5 * t21 * v[2] * -213000.0) +
                  t290_tmp * (t6 * t86)) +
                 t7 * (t20 * t83)) +
                t6 * t9 * t21 * v[0] * 426000.0) +
               t7 * t10 * t20 * v[0] * 426000.0) +
              t6 * t124) +
             t7 * t8 * t20 * v[1] * -213000.0) +
            t30 * t21 * v[2] * 426000.0) +
           t59 * t9 * t10 * v[1] * 426000.0) -
          t510 * t9 * t10 * v[2] * 426000.0) -
         t8 * t20 * t21 * v[1] * 426000.0;
  t139 = t138 * t138;
  t158 = t336 * t136 * t138;
  t20 = t519 * t136 * t138;
  t21 = t7 * t9 * t136 * t138;
  t162 = t290_tmp * t136 * t138;
  t220_tmp = t6 * t136 * t138;
  t220 = t220_tmp * 0.0033419999999999839;
  t227_tmp = t9 * t136 * t138;
  t227 = t227_tmp * 0.033451;
  t296_tmp = t37 * t290;
  t296 = t296_tmp * 3.4945482796623249E-7;
  t298 = t296_tmp * 1.8557535189226148E-8;
  t299 = t296_tmp * 5.6355440939848791E-12;
  t301 = t296_tmp * 4.5785977209107538E-11;
  t307 = t7 * t279 + t10 * t280;
  t308 = t10 * t279 - t7 * t280;
  t311 = t9 * ((-(t6 * 0.0056569999999999841) + t9 * 0.0001019999999999979) +
               0.0033419999999999839) +
         t6 * ((t9 * 0.0056569999999999841 + t6 * 0.0001019999999999979) -
               0.033451);
  t336 = t335 * t335;
  t337_tmp = t63 * t335;
  t337 = t337_tmp * -2.2041482069254338E-5 / a_tmp;
  t338 = t337_tmp / (t9 * 45369.0 - t29 * 45369.0);
  t348 = t337_tmp * 7.3662633075447641E-8 / a_tmp;
  t82 = t37 * t63 * t290 * t335 * 9.71653863618521E-10 / a_tmp;
  t236 = t158 * 0.019462;
  t239 = t162 * 0.019462;
  t265 = t20 + t21;
  t266 = t158 + t10 * -t9 * t136 * t138;
  t83 = t37 * t37 * (t290 * t290) * 4.8582693180926035E-10;
  t85 = t220_tmp * t307;
  t322_tmp = t136 * t138;
  t322 = t322_tmp * t311;
  t84 = t64 * t106 * t336 * 9.71653863618521E-10;
  t386 = t220_tmp * 0.063146 + t348;
  t387 = t227_tmp * 0.063146 + t337_tmp * 7.3730961669862691E-7 / a_tmp;
  t390 = t280 * t337;
  t30 = t279 * t338;
  t407 = t296_tmp / 45369.0 + t338;
  t317_tmp = t37 * t265 * t290;
  t391 = t7 * t386;
  t104 = t10 * t386;
  t100 = t7 * t387;
  t396 = t10 * t387;
  t86 = a[1] * t5;
  t124 = a[2] * t8;
  t290_tmp = t139 * t144;
  t510 = t29 * t37 * t136 * t138 * t290;
  t433_tmp = t9 * t63 * t136 * t138 * t335;
  t519 = t29 * t63 * t136 * t138 * t335;
  t433 = ((((t86 * 5000.0 + t124 * 5000.0) + t290_tmp * 406.0) +
           t510 * 0.046948356807511735) +
          t433_tmp * 0.046948356807511735 / a_tmp) +
         t519 * 0.046948356807511735 / a_tmp;
  t333 = t322_tmp * 0.000102 - t322;
  t421 =
      ((((t158 * 0.001088793059 - t162 * 0.001088793059) + t20 * 7.117814E-6) +
        t21 * 7.117814E-6) -
       t299) +
      t337_tmp * -5.6355440939848791E-12 / a_tmp;
  t422 = ((((t162 * 2.55679E-7 - t158 * 2.55679E-7) + t20 * 2.077264E-6) +
           t21 * 2.077264E-6) +
          t296_tmp * 2.4255080517534E-8) +
         t337_tmp * 2.4255080517534E-8 / a_tmp;
  t423 = ((((t20 * 2.4787446E-5 + t21 * 2.4787446E-5) + t158 * 7.117814E-6) -
           t162 * 7.117814E-6) +
          t301) +
         t337_tmp * 4.5785977209107538E-11 / a_tmp;
  t434 = t6 * t147 * t433;
  t435 = t9 * t147 * t433;
  t444_tmp = t147 * t311 * t433;
  t59 = t20 * 0.019462 + t21 * 0.019462;
  t469 = (((t59 + t296_tmp * 2.5721307500716351E-6) + t104) + t30) + t100;
  t476 =
      (((t59 + t337_tmp * -2.5721307500716351E-6 / a_tmp) + t104) + t30) + t100;
  t500 =
      ((((((((((((((((((((((((((((((((((((((a[1] * t8 * 2.347417840375587 -
                                            a[2] * t5 * 2.347417840375587) -
                                           a[0] * t10 * 2.347417840375587) +
                                          a[1] * t34 * 0.8948841720117261) +
                                         a[2] * t35 * 0.8948841720117261) +
                                        a[1] * std::sin(t12) *
                                            1.173708920187793) -
                                       a[2] * std::cos(t12) *
                                           1.173708920187793) +
                                      a[1] * t71 * 0.8948841720117261) +
                                     a[1] * std::sin(t46) *
                                         1.173708920187793) -
                                    a[2] * t72 * 0.8948841720117261) -
                                   a[0] * t45 * 2.347417840375587) +
                                  a[1] * std::sin(t49) * 1.173708920187793) -
                                 a[2] * std::cos(t49) * 1.173708920187793) -
                                a[2] * std::cos(t46) * 1.173708920187793) +
                               a[1] * std::sin(t70) * 1.173708920187793) -
                              a[0] * t69 * 2.347417840375587) -
                             a[2] * std::cos(t70) * 1.173708920187793) -
                            a[2] * std::cos(t78) * 1.173708920187793) -
                           a[1] * std::sin(t78) * 1.173708920187793) -
                          a[2] * std::cos(t93) * 1.173708920187793) -
                         a[1] * std::sin(t93) * 1.173708920187793) +
                        t6 * t139 * t144) +
                       t26 * t139 * t144 * 1.395329189534704) +
                      t42 * t139 * t144 * 0.5) +
                     std::cos(t13 + t14) * t139 * t144 * 0.25) +
                    t56 * t139 * t144 * 0.25) +
                   std::cos(t13 + t40) * t139 * t144 * 0.5) +
                  std::cos(t13 * 3.0) * t139 * t144 * 0.25) +
                 t6 * t83) +
                t26 * t83) +
               t37 * t69 * t136 * t138 * t290 * 8.4026682818002442E-6) +
              t6 * t64 * t106 * t336 * 7.2874039771389057E-10) +
             t26 * t64 * t106 * t336 * 7.2874039771389057E-10) +
            t42 * t64 * t106 * t336 * 2.4291346590463017E-10) +
           t56 * t64 * t106 * t336 * 2.4291346590463017E-10) +
          t10 * t63 * t136 * t138 * t335 * -8.4026682818002442E-6 / a_tmp) +
         t45 * t63 * t136 * t138 * t335 * 8.4026682818002442E-6 / a_tmp) +
        t63 * t69 * t136 * t138 * t335 * 8.4026682818002442E-6 / a_tmp) +
       t6 * t82) +
      t26 * t82;
  t379_tmp =
      t296_tmp *
      (((t20 * 0.116695 + t21 * 0.116695) + t162 * 0.0061970000000000081) -
       t158 * 0.0061970000000000081);
  t379 = t379_tmp * 2.9945998368930331E-6;
  t420 = (t85 + -t9 * t136 * t138 * t308) + t333;
  t424 = ((t322_tmp * 1.3857924E-5 + t85 * 0.135862) -
          t227_tmp * t308 * 0.135862) -
         t322 * 0.135862;
  t59 = t227_tmp * t337 + t434;
  t85 = t220_tmp * t338 + t435;
  t336 = ((((t239 - t236) + t296_tmp * 1.3659106438316931E-7) + t280 * t338) +
          t396) -
         t391;
  t471_tmp = t63 * t279;
  t100 = ((((t20 * 0.002644146244 + t21 * 0.002644146244) + t296) +
           t471_tmp * t335 * 2.9945998368930331E-6 / a_tmp) +
          t104 * 0.135862) +
         t100 * 0.135862;
  t35 =
      t37 * (((((((((((((((((((((((((t86 * 1.789768344023452 +
                                     t124 * 1.789768344023452) -
                                    a[0] * t9 * 4.694835680751174) -
                                   a[0] * t29 * 4.694835680751174) +
                                  a[1] * std::sin(t11) * 2.347417840375587) -
                                 a[2] * std::cos(t11) * 2.347417840375587) +
                                a[1] * t35 * 2.347417840375587) -
                               a[2] * t34 * 2.347417840375587) +
                              a[1] * std::sin(t48) * 2.347417840375587) -
                             a[2] * std::cos(t48) * 2.347417840375587) -
                            a[1] * t72 * 2.347417840375587) -
                           a[2] * t71 * 2.347417840375587) +
                          t290_tmp * 1.145329189534704) +
                         t7 * t139 * t144) +
                        std::cos(t14) * t139 * t144 * 0.5) +
                       std::cos(t40) * t139 * t144) +
                      std::cos(t51) * t139 * t144 * 0.5) +
                     t83) +
                    t7 * t83) +
                   t510 * 1.6805336563600488E-5) +
                  t84) +
                 t7 * t84) +
                t433_tmp * 1.6805336563600488E-5 / a_tmp) +
               t519 * 1.6805336563600488E-5 / a_tmp) +
              t82) +
             t7 * t82);
  t34 = t147 * t433;
  t30 = t5 * 9.81 - t34 * 0.008752;
  t104 = t37 * t266 * t290;
  t69 = t322_tmp * 9.384E-5 - t322 * 0.92;
  t144 = t220_tmp * 0.058094319999999991 +
         t337_tmp * 6.7769622429411819E-8 / a_tmp;
  t290 = t227_tmp * 0.058094319999999991 +
         t337_tmp * 6.7832484736273673E-7 / a_tmp;
  t147 = (t227_tmp * 0.000572001265 + t220_tmp * 5.7496807E-5) +
         t337_tmp * 9.887085291719015E-8 / a_tmp;
  t72 = t265 * t424;
  t71 = t266 * t424;
  t11 = t6 * t30;
  t14 = t10 * t59;
  t40 = t7 * t59;
  t48 = t7 * t85;
  t51 = t10 * t85;
  t45 = t307 * t59;
  t56 = t45 * 0.135862;
  t49 = t308 * t85;
  t42 = t49 * 0.135862;
  t85 = t63 * t280;
  t59 = ((((t162 * 0.002644146244 - t158 * 0.002644146244) + t298) +
          t85 * t335 * 2.9945998368930331E-6 / a_tmp) +
         t396 * 0.135862) -
        t391 * 0.135862;
  t13 = t265 * t100;
  t26 = t407 * t100;
  t46 = t336 * t100;
  t64 = t30 * t9;
  t78 = t266 * t59;
  t93 = t407 * t59;
  t106 = -(t469 * t59);
  t70 = t63 * t500;
  t30 = ((t433_tmp * -1.3918314267451341E-6 / a_tmp + t11) +
         t434 * 0.07189799999999999) +
        t70 * -0.0033419999999999839 / a_tmp;
  t12 = t6 * t63 * t136 * t138 * t335;
  t510 = ((t12 * 1.3918314267451341E-6 / a_tmp + t64) +
          t435 * 0.07189799999999999) +
         t70 * -0.033451 / a_tmp;
  t139 = ((((((((((-(t317_tmp * 2.3998612687077079E-8) +
                   t104 * 1.568871696532875E-10) -
                  t265 * t422) +
                 t407 * t423) +
                t40 * 0.001088793059) +
               t14 * 7.117814E-6) -
              t51 * 0.001088793059) +
             t48 * 7.117814E-6) +
            t424 * t336) -
           t420 * t59) +
          t35 * 2.55679E-7) +
         t70 * 2.55679E-7 / a_tmp;
  t322_tmp = t7 * t510;
  t322 = t10 * t30;
  t290_tmp = t471_tmp * t500;
  t433 = (((((((t72 + t14 * 0.002644146244) + t48 * 0.002644146244) +
              t296_tmp *
                  (((((t236 - t239) + t390) + t391) - t396) +
                   t337_tmp * 1.3659106438316931E-7 / a_tmp) *
                  2.9945998368930331E-6) +
             t93) -
            t35 * 0.01585441609) +
           t290_tmp * -0.135862 / a_tmp) +
          t322 * 0.135862) +
         t322_tmp * 0.135862;
  t124 = t7 * t30;
  t86 = t10 * t510;
  t84 = t85 * t500;
  t519 = (((((((t71 + t40 * 0.002644146244) - t51 * 0.002644146244) -
              t296_tmp * t476 * 2.9945998368930331E-6) +
             t26) +
            t35 * 0.00084193681400000124) +
           t84 * 0.135862 / a_tmp) +
          t124 * 0.135862) -
         t86 * 0.135862;
  t20 = (t220 + t227) * t63 * t335;
  t21 = t7 * t433;
  t82 = t10 * t519;
  t83 = (((((((-(t8 * 1.33280622) + t379) - t34 * 1.3857924E-5) +
             t444_tmp * 0.135862) -
            t56) +
           t42) +
          t13) -
         t78) +
        t20 * 2.9945998368930331E-6 / a_tmp;
  t30 = ((((((((((t317_tmp * 1.568871696532875E-10 -
                  t104 * 5.4635204655161008E-10) -
                 t266 * t422) +
                t407 * t421) -
               t14 * 2.4787446E-5) -
              t40 * 7.117814E-6) -
             t48 * 2.4787446E-5) +
            t51 * 7.117814E-6) +
           t424 * t469) -
          t420 * t100) +
         t35 * 2.077264E-6) +
        t70 * 2.077264E-6 / a_tmp;
  t59 = t7 * t519;
  t510 = t10 * t433;
  t336 = t220_tmp * t144;
  t85 = t227_tmp * t290;
  t104 = (t227_tmp * 0.000740309489 - t220_tmp * 0.000218457134) +
         t337_tmp * 1.26077556260883E-8 / a_tmp;
  t100 = (t220_tmp * 0.004431760472 - t227_tmp * 0.000218457134) +
         t337_tmp * 1.2673148405298769E-9 / a_tmp;
  tau[0] =
      (((((((((t5 * -0.05074155792 + t8 * 0.00164788305444) - t13 * 0.000102) +
             t78 * 0.000102) +
            t9 *
                (((((((t435 * 0.06614616 + t64 * 0.92) + t21) - t82) +
                    t337 * t144) -
                   t70 * 0.03077492 / a_tmp) +
                  t227_tmp * t69) +
                 t12 * 1.2804849126055231E-6 / a_tmp) *
                0.063146) +
           ((t34 * 0.000379294663816248 + t45 * 1.3857924E-5) -
            t49 * 1.3857924E-5)) +
          (t311 *
               ((((((((((t8 * -10.35800622 + t379) - t56) + t42) + t13) - t78) -
                    t34 * 0.000107697924) +
                   t444_tmp * 1.055862) +
                  t336) +
                 t85) +
                t20 * 2.3272763340607019E-5 / a_tmp) -
           t9 * ((((((t434 * 0.000218457134 - t435 * 0.000740309489) -
                     t308 * t83) -
                    t21 * 0.019462) +
                   t10 * t139) +
                  ((((t82 * 0.019462 - t333 * t290) + t69 * t387) + t7 * t30) +
                   t338 * t100)) +
                 (((t70 * 0.000572001265 / a_tmp - t220_tmp * t147) -
                   t12 * 1.6317518327492342E-8 / a_tmp) -
                  t433_tmp * 4.8151190019616922E-9 / a_tmp)))) +
         -t6 * (((((t434 * -0.004431760472 + t435 * 0.000218457134) +
                   t307 * t83) +
                  (((((t337 * t104 - t7 * t139) - t59 * 0.019462) -
                     t510 * 0.019462) -
                    t333 * t144) +
                   t69 * t386)) +
                 (((t10 * t30 + t70 * 5.7496807E-5 / a_tmp) + t227_tmp * t147) +
                  t12 * 4.8151190019616922E-9 / a_tmp)) +
                t433_tmp * 9.7682568978818128E-8 / a_tmp)) +
        t6 *
            (((((((t434 * 0.06614616 + t11 * 0.92) + t59) + t510) +
                t338 * t290) -
               t70 * 0.0030746399999999848 / a_tmp) +
              t220_tmp * t69) -
             t433_tmp * 1.2804849126055231E-6 / a_tmp) *
            0.063146) +
       (((t379_tmp * -3.0544918336308929E-10 - t444_tmp * 0.000107697924) -
         t336 * 0.000102) -
        t85 * 0.000102)) +
      t20 * -2.3738218607419161E-9 / a_tmp;
  t20 = ((t265 * t299 + t266 * t301) + t265 * t421) - t266 * t423;
  tau[1] = ((((((((((t20 + t434 * 0.00027855727371999889) +
                    t435 * 0.00278465646316) +
                   t11 * 0.0030746399999999848) +
                  t64 * 0.03077492) +
                 t46) +
                t106) -
               t40 * 2.55679E-7) +
              ((((t48 * 2.077264E-6 + t14 * 2.077264E-6) + t51 * 2.55679E-7) +
                t59 * 0.0033419999999999839) +
               t21 * 0.033451)) +
             (((((((((((t82 * -0.033451 + t510 * 0.0033419999999999839) -
                       t35 * 0.001100428748) +
                      t220 * t69) +
                     t227 * t69) +
                    t337_tmp * -7.3730961669862691E-7 / a_tmp * t144) +
                   t348 * t290) +
                  t144 * t387) -
                 t386 * t290) +
                t279 * t433) -
               t280 * t519) -
              t70 * 0.0066258277698 / a_tmp)) +
            ((-t6 * t136 * t138 * t104 + t227_tmp * t100) +
             t12 * 5.5441256437655659E-8 / a_tmp)) +
           t433_tmp * -5.5466954184575151E-9 / a_tmp;
  tau[2] = (((((((((t20 + t72 * 0.116695) - t71 * 0.0061970000000000081) -
                  t26 * 0.0061970000000000081) +
                 t93 * 0.116695) +
                t46) +
               t106) -
              t40 * 1.6641453274068021E-5) +
             ((((t48 * 0.00031063590994357987 + t14 * 0.00031063590994357987) +
                t51 * 1.6641453274068021E-5) -
               t124 * 0.00084193681400000124) +
              t322_tmp * 0.01585441609)) +
            ((((t322 * 0.01585441609 + t86 * 0.00084193681400000124) -
               t35 * 0.0029557773160589071) +
              t298 * t476) +
             t296 * (((((t236 - t239) + t390) + t391) - t396) +
                     t335 * t63 * 1.3659106438316931E-7 / (t9 - t29)))) +
           ((t70 * -0.001100428748 / a_tmp - t290_tmp * 0.01585441609 / a_tmp) -
            t84 * 0.00084193681400000124 / a_tmp);
}

// End of code generation (go1_FL_inverse_dynamics_task_space.cpp)
