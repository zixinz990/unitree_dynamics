//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// go1_FR_leg_inverse_dynamics.cpp
//
// Code generation for function 'go1_FR_leg_inverse_dynamics'
//

// Include files
#include "go1_FR_leg_inverse_dynamics.h"

#include <cmath>

// Function Definitions
void go1_FR_leg_inverse_dynamics() {
    taulist.setZero();
    double b_t185_tmp;
    double b_t200_tmp;
    double b_t338_tmp;
    double c_t338_tmp;
    double d_t338_tmp;
    double t11;
    double t110;
    double t110_tmp;
    double t113;
    double t114;
    double t120;
    double t13;
    double t135;
    double t136;
    double t14;
    double t148;
    double t16;
    double t162_tmp;
    double t168;
    double t17;
    double t170;
    double t171_tmp;
    double t178;
    double t185;
    double t185_tmp;
    double t186;
    double t191;
    double t192_tmp;
    double t194;
    double t196;
    double t20;
    double t200;
    double t200_tmp;
    double t204;
    double t204_tmp;
    double t206;
    double t212;
    double t22;
    double t222;
    double t224;
    double t228_tmp;
    double t23;
    double t231;
    double t232;
    double t234;
    double t238;
    double t24;
    double t240;
    double t249;
    double t25;
    double t251;
    double t273;
    double t273_tmp;
    double t280;
    double t281;
    double t282_tmp;
    double t287;
    double t290;
    double t291;
    double t296;
    double t296_tmp;
    double t301_tmp;
    double t306;
    double t307;
    double t31;
    double t311;
    double t314;
    double t317;
    double t319;
    double t32;
    double t320;
    double t321;
    double t325;
    double t326_tmp;
    double t338;
    double t338_tmp;
    double t339_tmp;
    double t35;
    double t35_tmp;
    double t36;
    double t41;
    double t42;
    double t43;
    double t48;
    double t49;
    double t5;
    double t52;
    double t56;
    double t56_tmp;
    double t6;
    double t65;
    double t67;
    double t7;
    double t72;
    double t8;
    double t82;
    double t82_tmp;
    double t85;
    double t85_tmp;
    double t96_tmp;
    double t98;
    // go1_FR_leg_inverse_dynamics
    //     TAULIST = go1_FR_leg_inverse_dynamics(IN1,IN2,IN3)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     29-Jun-2023 11:43:16
    t5 = std::abs(q[0]);
    t6 = std::abs(q[1]);
    t7 = std::abs(q[2]);
    t8 = dq[1] + dq[2];
    t16 = q[1] * q[1];
    t17 = q[2] * q[2];
    t65 = dq[1] * 0.003342;
    t67 = dq[1] * 0.03077492;
    t72 = dq[2] * 2.55679E-7;
    t148 = dq[2] * 0.01585441609;
    t11 = std::cos(t7);
    t13 = std::sin(t6);
    t14 = std::sin(t7);
    t20 = 1.0 / t5;
    t22 = 1.0 / t6;
    t24 = 1.0 / t7;
    t23 = t22 * t22;
    t25 = t24 * t24;
    t31 = ddq[0] * q[1] * t13 * t22;
    t296 = dq[0] * dq[1];
    t32 = t296 * q[1] * t13 * t22;
    t82 = dq[0] * q[1];
    t43 = t82 * q[2] * t13 * t14 * t22 * t24;
    t85_tmp = t82 * t13 * t22;
    t85 = t85_tmp * 0.033451;
    t96_tmp = q[0] * std::sin(t5) * t20;
    t35_tmp = std::cos(t6) - 1.0;
    t35 = t16 * t23 * t35_tmp;
    t36 = t17 * t25 * (t11 - 1.0);
    t114 = t43 * 0.016646;
    t82_tmp = q[0] * q[0] * (t20 * t20) * (std::cos(t5) - 1.0);
    t82 = (ddq[0] * 0.008752 + t82_tmp * 9.81) + 9.81;
    t5 = t35 * 0.07189799999999999;
    t98 = t36 * 0.016646;
    t186 = dq[1] * 0.033451 - t85_tmp * 0.063146;
    t196 = t67 - t85_tmp * 0.058094319999999991;
    t41 = ddq[0] * (t35 + 1.0);
    t42 = t296 * (t35 + 1.0);
    t48 = t85_tmp * (t36 + 1.0);
    t49 = dq[0] * q[2] * t14 * t24 * (t35 + 1.0);
    t56_tmp = dq[0] * (t35 + 1.0);
    t56 = t56_tmp * (t36 + 1.0);
    t110_tmp = q[1] * t13 * t22;
    t110 = t110_tmp * t82;
    t113 = t56_tmp * 0.003342;
    t135 = (t35 + 1.0) * t82;
    t170 = t36 * 0.016646 + 0.016646;
    t204_tmp = q[2] * t14 * t24;
    t204 = t204_tmp * t186;
    t212 = (t36 + 1.0) * t186;
    t52 = t31 + t42;
    t120 = t48 + t49;
    t136 = t49 * 0.016646;
    t168 = ddq[0] * (t5 + 0.07189799999999999);
    t20 = dq[0] * (t5 + 0.07189799999999999);
    t185_tmp = t32 - t41;
    b_t185_tmp = (t36 + 1.0) * t185_tmp;
    t185 = b_t185_tmp * 2.55679E-7;
    t191 = t85_tmp * (t98 + 0.016646);
    t200_tmp = t43 - t56;
    b_t200_tmp = dq[2] * t200_tmp;
    t200 = b_t200_tmp * -2.077264E-6;
    t206 = t56_tmp * (t98 + 0.016646);
    t231 = (dq[1] * 0.004485671726 + t85_tmp * 0.000572001265) +
           t56_tmp * 5.7496807E-5;
    t234 = (dq[1] * 5.7496807E-5 - t85_tmp * 0.000218457134) +
           t56_tmp * 0.004431760472;
    t162_tmp = t204_tmp * t52;
    t171_tmp = (t36 + 1.0) * t52;
    t178 = t171_tmp * 2.077264E-6;
    t192_tmp = dq[2] * t120;
    t194 = t72 * t120;
    t228_tmp = dq[1] * (t85 + t113);
    t232 = (dq[1] * 0.000572001265 + t85_tmp * 0.000740309489) -
           t56_tmp * 0.000218457134;
    t296 = t17 * t24 * (t11 - 1.0);
    t5 = q[2] * (t7 + -t17 * t25 * (t7 - t14));
    t249 = ((-(t204_tmp * 0.009539) + t36 * 0.296244) +
            -t24 * (t296 * 0.116695 - t5 * 0.0061970000000000011)) +
           0.296244;
    t281 = ((((dq[1] * 2.077264E-6 + dq[2] * 2.077264E-6) - t43 * 7.117814E-6) +
             t48 * 2.4787446E-5) +
            t49 * 2.4787446E-5) +
           t56 * 7.117814E-6;
    t222 = t56_tmp * 0.008752 - t20;
    t25 = ((ddq[1] * 0.003342 + t32 * 0.063146) + t135) - t168;
    t14 = dq[1] * t249;
    t11 = t16 * t22 * t35_tmp;
    t82 = q[1] * (t6 + -t16 * t23 * (t6 - t13));
    t280 = ((((dq[1] * 0.001100428748 + dq[2] * 0.001100428748) +
              t43 * 2.55679E-7) +
             t48 * 2.077264E-6) +
            t49 * 2.077264E-6) -
           t56 * 2.55679E-7;
    t282_tmp = ((((dq[1] * 2.55679E-7 + t72) + t43 * 0.001088793059) -
                 t48 * 7.117814E-6) -
                t49 * 7.117814E-6) -
               t56 * 0.001088793059;
    t290 = t281 * t200_tmp;
    t224 = dq[1] * t222;
    t238 = t65 + t222;
    t240 = (t56_tmp * 0.00805184 + dq[1] * 0.00307464) - t20 * 0.92;
    t251 = ((t204_tmp * 0.296244 + t36 * 0.009539) -
            t24 * (t296 * 0.0061970000000000011 + t5 * 0.116695)) +
           0.009539;
    t273_tmp =
        dq[2] *
        (((t43 * 0.0061970000000000011 + t48 * 0.116695) + t49 * 0.116695) -
         t56 * 0.0061970000000000011);
    t273 = t273_tmp * 0.135862;
    t287 = -(t120 * t282_tmp);
    t7 = t204_tmp * t238;
    t5 = (t36 + 1.0) * t238;
    t20 = dq[1] * t251;
    t17 = ((ddq[1] * 0.033451 - t31 * 0.07189799999999999) + t110) + t224;
    t296_tmp = t110_tmp * (((t110_tmp * 0.033349 + t35 * 0.002315) +
                            t22 * (t11 * 0.003342 - t82 * 0.033451)) +
                           0.002315) -
               (t35 + 1.0) * (((t110_tmp * 0.002315 - t35 * 0.033349) +
                               t22 * (t11 * 0.033451 + t82 * 0.003342)) -
                              0.033349);
    t296 = dq[0] * t296_tmp;
    t301_tmp = ddq[0] * t296_tmp;
    t291 = t204_tmp * t251 + (t36 + 1.0) * t249;
    t306 = dq[0] * 0.000102 + t296;
    t311 = ((((dq[2] * 0.116695 - t136) - t191) + t212) + t7) + t14;
    t82 = t56_tmp * t291;
    t307 = dq[0] * 9.384E-5 + t296 * 0.92;
    t11 = ((((dq[2] * 0.0061970000000000011 - t114) + t204) + t206) - t5) + t20;
    t314 = ((((dq[1] * 0.0061970000000000011 + t114) - t204) - t206) + t5) - t20;
    t317 =
        ((((t148 - t49 * 0.002261558852) - t191 * 0.135862) + t212 * 0.135862) +
         t7 * 0.135862) +
        t14 * 0.135862;
    t5 = ((((dq[2] * 0.00084193681400000016 - t43 * 0.002261558852) +
            t204 * 0.135862) +
           t206 * 0.135862) -
          t5 * 0.135862) +
         t20 * 0.135862;
    t319 = t8 * t317;
    t321 = t120 * t317;
    t325 = t11 * t317;
    t326_tmp = t204_tmp * t249 - (t36 + 1.0) * t251;
    t20 = (-dq[0] * q[1] * t13 * t22 * t326_tmp + t82) + t306;
    t320 = t8 * t5;
    t43 = ((dq[0] * 1.3857924E-5 + t85_tmp * t326_tmp * -0.135862) +
           t296 * 0.135862) +
          t82 * 0.135862;
    t13 = -(t311 * t5);
    t22 = t120 * t43;
    t338_tmp = t204_tmp * t185_tmp;
    b_t338_tmp = ddq[1] * t249;
    c_t338_tmp = (t36 + 1.0) * t17;
    d_t338_tmp = t204_tmp * t25;
    t338 = (((((((ddq[2] * 0.01585441609 + t338_tmp * 0.002261558852) -
                 t52 * (t98 + 0.016646) * 0.135862) +
                b_t338_tmp * 0.135862) +
               d_t338_tmp * 0.135862) +
              c_t338_tmp * 0.135862) +
             dq[2] * t314 * 0.135862) +
            t320) +
           t22;
    t339_tmp = ddq[1] * t251;
    t114 = dq[2] * (((((dq[1] * 0.116695 + t136) + t191) - t212) - t7) - t14);
    t49 = (t36 + 1.0) * t25;
    t204 = t170 * t185_tmp;
    t48 = t204_tmp * t17;
    t56 = (((((((-(ddq[2] * 0.00084193681400000016) + t162_tmp * 0.002261558852) +
                t204 * 0.135862) -
               t339_tmp * 0.135862) +
              t49 * 0.135862) -
             t48 * 0.135862) +
            t114 * 0.135862) +
           t319) +
          -t43 * t200_tmp;
    t24 = t204_tmp * t338;
    t206 = (t36 + 1.0) * t56;
    t23 = ((((((((((ddq[1] * 2.55679E-7 + ddq[2] * 2.55679E-7) +
                   t162_tmp * 0.001088793059) +
                  t338_tmp * 7.117814E-6) -
                 t171_tmp * 7.117814E-6) +
                b_t185_tmp * 0.001088793059) +
               t192_tmp * 0.001088793059) +
              b_t200_tmp * 7.117814E-6) -
             t8 * t281) +
            t120 * t280) -
           t11 * t43) +
          t5 * t20;
    t72 = ((((((ddq[1] * 0.00307464 + t32 * 0.058094319999999991) + t135 * 0.92) -
              t168 * 0.92) +
             dq[1] * t196) +
            t56_tmp * t307) +
           t24) +
          t206;
    t16 = t291 * t185_tmp;
    t7 = t5 * t200_tmp;
    t17 = t52 * t326_tmp;
    t14 = t16 * 0.135862;
    t25 = t17 * 0.135862;
    t35_tmp = t56_tmp * t240;
    t6 = (((((((-(t96_tmp * 1.33280622) - ddq[0] * 1.3857924E-5) +
               t228_tmp * 0.135862) +
              t273) +
             t301_tmp * -0.135862) +
            t321) +
           t14) +
          t7) +
         t25;
    t5 = ((((((((((-(ddq[1] * 2.077264E-6) - ddq[2] * 2.077264E-6) +
                  t162_tmp * 7.117814E-6) -
                 t171_tmp * 2.4787446E-5) +
                t192_tmp * 7.117814E-6) -
               t8 * t282_tmp) +
              t311 * t43) -
             t317 * t20) +
            b_t200_tmp * 2.4787446E-5) +
           b_t185_tmp * 7.117814E-6) +
          t280 * t200_tmp) +
         t338_tmp * 2.4787446E-5;
    t20 = t204_tmp * t56;
    t296 = t85_tmp * t196;
    t82 = dq[1] * t240;
    t11 = (t36 + 1.0) * t338;
    taulist[0] =
        ((((((ddq[0] * 0.000379294663816248 - t321 * 0.000102) +
             (((t228_tmp * -0.000107697924 - t273_tmp * 1.3857924E-5) +
               (t35 + 1.0) * t72 * 0.008752) -
              (t35 * 0.07189799999999999 + 0.07189799999999999) * t72)) +
            (t301_tmp * 0.000107697924 - t16 * 1.3857924E-5)) +
           ((((t7 * -0.000102 - t17 * 1.3857924E-5) -
              t296_tmp *
                  (((((ddq[0] * -0.000107697924 + t273) + t321) +
                     t228_tmp * 1.055862) -
                    t301_tmp * 1.055862) +
                   (((((t14 + t7) + t25) + t35_tmp) - t96_tmp * 10.35800622) +
                    t296))) -
             (t35 + 1.0) * ((((((ddq[1] * -5.7496807E-5 + t31 * 0.000218457134) +
                                t32 * 0.004431760472) -
                               t41 * 0.004431760472) +
                              t42 * 0.000218457134) +
                             ((((((t24 * 0.016646 + t291 * t6) - dq[1] * t232) +
                                 (t36 + 1.0) * t23) +
                                (t98 + 0.016646) * t56) +
                               t238 * t307) -
                              t240 * t306)) +
                            (t204_tmp * t5 + t85_tmp * t231))) -
            t35_tmp * 0.000102)) +
          ((t96_tmp * 0.00164788305444 + t82_tmp * 0.05074155792) +
           t110_tmp *
               ((((((((ddq[1] * 0.000572001265 + t31 * 0.000740309489) +
                      t32 * 0.000218457134) -
                     t41 * 0.000218457134) +
                    t42 * 0.000740309489) -
                   dq[1] * t234) +
                  (((-t186 * t307 + t196 * t306) - (t98 + 0.016646) * t338) +
                   t326_tmp * t6)) +
                 (-(t36 + 1.0) * t5 + t56_tmp * t231)) +
                (t20 * 0.016646 + t204_tmp * t23)))) +
         t110_tmp *
             (((((((ddq[1] * 0.03077492 - t31 * 0.06614616) + t110 * 0.92) +
                  t224 * 0.92) -
                 t82) +
                t11) -
               t20) +
              t85_tmp * t307) *
             -0.063146) +
        (t296 * -0.000102 + 0.05074155792);
    taulist[1] =
        (((((ddq[1] * 0.0066258277698 + ddq[2] * 0.001100428748) -
            t31 * 0.00164065393316) +
           (((t32 * 0.00013665441044 + t41 * 5.7496807E-5) +
             t42 * 0.000572001265) +
            t110 * 0.03077492)) +
          (((((((((((t135 * 0.00307464 - t168 * 0.00307464) + t178) + t185) +
                  t194) +
                 t200) +
                t287) +
               t290) +
              t325) +
             t13) +
            t24 * 0.003342) +
           t206 * 0.003342)) +
         ((((((((((((t82 * -0.033451 + t65 * t196) + t67 * t222) +
                   t11 * 0.033451) +
                  t85 * t307) +
                 t113 * t307) +
                t186 * t240) -
               t196 * t238) +
              t249 * t338) -
             t251 * t56) -
            t56_tmp * t232) +
           t162_tmp * 2.55679E-7) -
          t20 * 0.033451)) +
        (t338_tmp * -2.077264E-6 + t85_tmp * t234);
    taulist[2] =
        (((((((((((((ddq[1] * 0.001100428748 + ddq[2] * 0.0029557773160589071) +
                    t178) +
                   t185) +
                  t194) +
                 t200) +
                t287) +
               t290) -
              t319 * 0.0061970000000000011) +
             ((((t320 * 0.116695 + t325) + t13) + t22 * 0.116695) +
              b_t338_tmp * 0.01585441609)) +
            (t339_tmp * 0.00084193681400000016 - t114 * 0.00084193681400000016)) +
           (t52 * t170 * -0.01585441609 - t49 * 0.00084193681400000016)) +
          (((c_t338_tmp * 0.01585441609 + t148 * t314) -
            t204 * 0.00084193681400000016) +
           t43 * t200_tmp * 0.0061970000000000011)) +
         (t162_tmp * -1.3759201205844E-5 + d_t338_tmp * 0.01585441609)) +
        (t48 * 0.00084193681400000016 + t338_tmp * 0.00026183534623414);
}

// End of code generation (go1_FR_leg_inverse_dynamics.cpp)
